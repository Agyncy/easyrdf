#!/usr/bin/env php
<?php

set_include_path(get_include_path() . PATH_SEPARATOR . './lib/');
require_once "EasyRdf/Namespace.php";
require_once "EasyRdf/Owl/Class.php";
require_once "EasyRdf/Owl/Property.php";
require_once "EasyRdf/Graph.php";

## FIXME: these should be passed from the command line options
$SHORT = "foaf";
$URI = "http://xmlns.com/foaf/0.1/";
$BASE_CLASS = "EasyRdf_Resource";
$OUTPUT_DIR = "./models";
$CLOBBER = true;


function createModel($class,$graph)
{
    global $BASE_CLASS;
    $class_name = $class->className();
    foreach($class->all('rdfs_subClassOf') as $subClassOf) {
        // FIXME: allow subClassOf to be any in any of the vocabs that we are processing
        if ($subClassOf->ns() == $class->ns()) {
            $super_class = $subClassOf->className();
            break;
        }
    }
    if (!$super_class) $super_class = $BASE_CLASS;
    
    $data = "<?php\n\n";
    $data .= "/**\n";
    foreach ($class->all('rdfs_comment') as $comment) { $data .= " * $comment\n"; }  
    $data .= " *\n";
    $data .= " * @package ".ucfirst($class->ns())."\n";  
    $data .= " */\n";
    $data .= "class $class_name extends $super_class\n";
    $data .= "{\n";
    foreach ($class->properties($graph) as $property) {
        $data .= "    /** ".$property->join('rdfs_comment')." */\n";
        $data .= "    public $".$property->shorten();
        if ($property->cardinality() == '1') {
            $data .= " = null;\n";
        } else {
            $data .= " = array();\n";
        }
        $data .= "\n";
    }
    # FIXME: add properties for owl#Thing if this isn't a subclass.
    $data .= "}\n\n";
    $data .= "EasyRdf_TypeMapper::add('".$class->shorten()."', '$class_name');\n";
    
    return array($class_name, $data);
}

function createVocab($classes)
{
    $data = "<?php\n\n";
    foreach ($classes as $class_filename) {
        $data .= "require_once \"$class_filename\";\n";
    }  

    return $data;
}

function mkpath($path)
{
    if(@mkdir($path) or file_exists($path)) return true;
    return (mkpath(dirname($path)) and mkdir($path));
}

function write_file($path, $data)
{
    global $CLOBBER;
    echo "Writing to: $path\n";
    mkpath(dirname($path));
    if (file_exists($path) and !$CLOBBER) {
        echo "* Warning: not overwriting file.\n";
    } else {
        file_put_contents( $path, $data );
    }
}




EasyRdf_Namespace::add($SHORT, $URI);
$graph = new EasyRdf_Graph($URI);

$classes = array();
foreach ($graph->allOfType('owl_Class') as $class) {
    if ($class->ns() != $SHORT) continue;
    list($class_name, $class_data) = createModel($class, $graph);
    $class_path = $OUTPUT_DIR . '/' . $class->fileName();
    write_file( $class_path, $class_data );
    array_push( $classes, $class->filename() );
}

$vocab_data = createVocab($classes);
$vocab_path = $OUTPUT_DIR . '/' . ucfirst(strtolower($SHORT)) . '.php';
write_file( $vocab_path, $vocab_data );
